@page "/jobs"
@using SunPro_Jobs.Models
@using SunPro_Jobs.Service
@inject JobService JobService
@inject NavigationManager Navigation

<div class="job-listing-container">
    <div class="header-part">
        <h2 class="title">Latest Featured Jobs</h2>
        <a href="/" class="explore-more">Explore more →</a>
    </div>

    <div class="job-grid">
        @if (jobs == null)
        {
            <p>Loading jobs...</p>
        }
        else if (!jobs.Any())
        {
            <p>No jobs available at the moment.</p>
        }
        else
        {
            @foreach (var job in jobs)
            {
                <div class="job-listing-card" @onclick="@(()=> NavigateToJobDetails(job.JobId))">
                    <div class="job-details">
                        <h3 class="job-title">Job Title: @job.JobName</h3>
                        <p class="job-company"><i class="fas fa-building"></i> SunPro Jobs</p>
                        <p class="job-location"><i class="fas fa-map-marker-alt">Location: </i> @job.Location</p>
                        <p class="job-salary"><i class="fas fa-money-bill"> SalaryRange: </i> @job.SalaryRange</p>
                        <p class="job-description">Description: @TruncateDescription(job.JobDescription, 250)</p>

                        <div class="job-meta">
                            <span class="job-tag">FEATURED</span>
                            <span class="job-tag new">NEW</span>
                        </div>
                    </div>
                    <div class="job-actions">
                        <SFbutton class="apply-btn" @onclick="@(() => NavigateToJobDetails(job.JobId))">View More</SFbutton>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<JobModel> jobs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            jobs = await JobService.GetAllJobsAsync();
            Console.WriteLine($"Jobs Loaded: {jobs.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching jobs: {ex.Message}");
        }
    }

    private void NavigateToJobDetails(int JobId)
    {
        Navigation.NavigateTo($"/job-details/{JobId}");
    }

    private string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description)) return "No description available.";
        return description.Length > maxLength ? description.Substring(0, maxLength) + "..." : description;
    }
}
