@page "/jobs"
@using SunPro_Jobs.Models
@using SunPro_Jobs.Service
@inject JobService JobService
@inject NavigationManager Navigation

<div class="job-listing-container">
    <div class="header">
        <h2 class="title">Latest featured jobs</h2>
        <a href="#" class="explore-more">Explore more →</a>
    </div>

    <div class="job-grid">
        @if (jobs == null)
        {
            <p>Loading jobs...</p>
        }
        else if (!jobs.Any())
        {
            <p>No jobs available at the moment.</p>
        }
        else
        {
            @foreach (var job in jobs)
            {
                <SfCard CssClass="job-card">
                    <SfCardHeader>
                        <img src="images/logo.jpg" alt="@job.JobName" class="job-image" />
                    </SfCardHeader>
                    <SfCardContent>
                        <h3 class="job-title">@job.JobName</h3>
                        <p class="job-category">@job.JobType</p>
                        <div class="job-meta">
                            <p><i class="fas fa-clock"></i> @job.JobStatus</p>
                            <p><i class="fas fa-map-marker-alt"></i> Location Not Available</p>
                        </div>
                    </SfCardContent>
                    <SfCardFooter>
                        <SfButton CssClass="apply-btn" Content="View More" @onclick="@(() => NavigateToJobDetails(job.JobId))"></SfButton>
                    </SfCardFooter>
                </SfCard>
            }
        }
    </div>
</div>

@code {
    private List<JobModel> jobs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            jobs = await JobService.GetAllJobsAsync();
            Console.WriteLine("$Jobs LOaded:{job.count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching jobs: {ex.Message}");
        }
    }

    private void NavigateToJobDetails(int JobId)
    {
        Navigation.NavigateTo($"/job-details/{JobId}");
    }


}
